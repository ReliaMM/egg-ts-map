"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const egg_1 = require("egg");
const xlsx = require("xlsx");
const normal_1 = require("../../../view/heatMap/position/normal");
const PAGE_TAG = 'heatMap';
const TYPE = 'position/normal';
class PositionNormalController extends egg_1.Controller {
    async upload(ctx) {
        const { service } = this;
        await service.file.uploadFileMultiple({ ctx, folderName: PAGE_TAG, type: TYPE }); // 文件转存处理
        ctx.body = {
            code: 200,
            success: true,
            rows: '上传成功',
        };
        ctx.status = 200;
    }
    /**
     * 生成文件
     */
    async createPath(ctx) {
        const { service } = this;
        const data = await service.excel.getExcelsData({ folderName: PAGE_TAG, type: TYPE, handlerFormat: this.formatData }); // 获取PAGE_TAG文件夹下，所有Excel格式化后数据
        await service.fileAsync.writeFilesHTML({ data, folderName: PAGE_TAG, type: TYPE, templateView: normal_1.getView }); // 生成对应html文件
        await service.fileAsync.writeFilesJS({ data, folderName: PAGE_TAG, type: TYPE }); // 生成js文件
        ctx.body = 'success';
        ctx.status = 200;
    }
    /**
     * 压缩文件
     */
    async compress(ctx) {
        const { service } = this;
        const content = await service.file.compressDir({ ctx, folderName: PAGE_TAG, type: TYPE, isDel: true }); // 压缩文件后将文件返回给服务器,并删除目标文件和压缩文件
        ctx.body = content;
        ctx.status = 200;
    }
    formatData({ sheets, fileName }) {
        const positions = sheets.map((sheet) => {
            return getPosition({ sheet, fileName });
        });
        return positions;
    }
}
exports.default = PositionNormalController;
function getPosition({ sheet, fileName }, self) {
    const sheetJSON = xlsx.utils.sheet_to_json(sheet);
    const heatMap = {};
    const rateObj = {};
    const [TYPE, RATE, PROVINCE, CITY, PERSION] = ['结果类别', '覆盖总数', '省', '市', '人群包名称'];
    const max = {};
    const selfProvince = sheetJSON && sheetJSON[0][PROVINCE];
    if (self) {
        console.log('------本省-----');
        sheetJSON.forEach(item => {
            const { lon, lat, [RATE]: rate, [PROVINCE]: province, [TYPE]: type } = item;
            if (selfProvince === province) {
                const tempHeatMapArr = heatMap[type] = heatMap[type] || [];
                const tempHeatRateArr = rateObj[type] = rateObj[type] || [];
                tempHeatRateArr.push(rate);
                tempHeatMapArr.push([lon, lat, rate]);
            }
        });
    }
    else {
        console.log('------所有-----');
        sheetJSON.forEach(item => {
            const { lon, lat, [RATE]: rate, [TYPE]: type } = item;
            const tempHeatMapArr = heatMap[type] = heatMap[type] || [];
            const tempHeatRateArr = rateObj[type] = rateObj[type] || [];
            tempHeatRateArr.push(rate);
            tempHeatMapArr.push([lon, lat, rate]);
        });
    }
    Object.keys(rateObj).forEach(key => {
        const newArray = Array.from(new Set(rateObj[key]));
        max[`${key}`] = Math.max(...newArray);
    });
    return Object.assign({
        radius: 20,
        province: selfProvince,
        city: sheetJSON && sheetJSON[0][CITY],
        persion: sheetJSON && sheetJSON[0][PERSION],
        fileName,
        heatMap,
        max,
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9ybWFsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibm9ybWFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkJBQXlDO0FBQ3pDLDZCQUE0QjtBQUM1QixrRUFBK0Q7QUFFL0QsTUFBTSxRQUFRLEdBQVcsU0FBUyxDQUFBO0FBQ2xDLE1BQU0sSUFBSSxHQUFXLGlCQUFpQixDQUFBO0FBQ3RDLE1BQXFCLHdCQUF5QixTQUFRLGdCQUFVO0lBQ3ZELEtBQUssQ0FBQyxNQUFNLENBQUUsR0FBWTtRQUMvQixNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFBO1FBQ3hCLE1BQU0sT0FBTyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFBLENBQUMsU0FBUztRQUMxRixHQUFHLENBQUMsSUFBSSxHQUFHO1lBQ1QsSUFBSSxFQUFFLEdBQUc7WUFDVCxPQUFPLEVBQUUsSUFBSTtZQUNiLElBQUksRUFBRSxNQUFNO1NBQ2IsQ0FBQTtRQUNELEdBQUcsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFBO0lBQ2xCLENBQUM7SUFDRDs7T0FFRztJQUNILEtBQUssQ0FBQyxVQUFVLENBQUMsR0FBWTtRQUMzQixNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFBO1FBQ3hCLE1BQU0sSUFBSSxHQUFHLE1BQU0sT0FBTyxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFBLENBQUMsK0JBQStCO1FBQ3BKLE1BQU0sT0FBTyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFB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