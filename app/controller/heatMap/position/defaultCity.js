"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const egg_1 = require("egg");
const xlsx = require("xlsx");
const default_baidu_1 = require("../../../view/heatMap/position/default-baidu");
const PAGE_TAG = 'heatMap';
const TYPE = 'position/default';
class PositionDefaultController extends egg_1.Controller {
    async upload(ctx) {
        const { service } = this;
        await service.file.uploadFileMultiple({ ctx, folderName: PAGE_TAG, type: TYPE }); // 文件转存处理
        ctx.body = {
            code: 200,
            success: true,
            rows: '上传成功',
        };
        ctx.status = 200;
    }
    /**
     * 生成文件
     */
    async createPath(ctx) {
        const { service } = this;
        const data = await service.excel.getExcelsData({ folderName: PAGE_TAG, type: TYPE, handlerFormat: this.formatData }); // 获取PAGE_TAG文件夹下，所有Excel格式化后数据
        await service.fileAsync.writeFilesHTML({ data, folderName: PAGE_TAG, type: TYPE, templateView: default_baidu_1.getView }); // 生成对应html文件
        await service.fileAsync.writeFilesJS({ data, folderName: PAGE_TAG, type: TYPE }); // 生成js文件
        ctx.body = 'success';
        ctx.status = 200;
    }
    /**
     * 压缩文件
     */
    async compress(ctx) {
        const content = await this.service.file.compressDir({ ctx, folderName: PAGE_TAG, type: TYPE, isDel: true }); // 压缩文件后将文件返回给服务器,并删除目标文件和压缩文件
        ctx.body = content;
        ctx.status = 200;
    }
    /**
     * 生成网页json
     */
    async getJSON(ctx) {
        const data = await this.service.excel.getExcelsData({ folderName: PAGE_TAG, type: TYPE, handlerFormat: this.formatData }); // 获取PAGE_TAG文件夹下，所有Excel格式化后数据const rows = await this.service.excel.getExcelsData({ folderName: PAGE_TAG, handlerFormat: this.formatData });
        ctx.body = {
            code: 200,
            data,
            success: true,
        };
        ctx.status = 200;
    }
    formatData({ sheets, fileName }) {
        const positions = sheets.map((sheet, index) => {
            if (sheet && index === 0) {
                return getPosition({ sheet, fileName });
            }
        });
        return positions;
    }
}
exports.default = PositionDefaultController;
function getPosition({ sheet, fileName }) {
    const sheetJSON = xlsx.utils.sheet_to_json(sheet);
    const heatMap = {};
    const rateObj = {};
    const [TYPE, RATE, CITY] = ['结果类别', '覆盖占比', '市'];
    const canCreateCity = ['成都市', '广州市', '深圳市', '东莞市', '郑州市', '沈阳市', '长沙市', '武汉市', '石家庄市'];
    const max = {};
    sheetJSON.forEach(item => {
        const { lon, lat, [RATE]: rate, [CITY]: city, [TYPE]: type } = item;
        if (type === '常访地' && canCreateCity.includes(city)) {
            const tempHeatMapArr = heatMap[city] = heatMap[city] || [];
            const tempHeatRateArr = rateObj[city] = rateObj[city] || [];
            tempHeatRateArr.push(rate);
            tempHeatMapArr.push([lon, lat, rate]);
        }
    });
    Object.keys(rateObj).forEach(key => {
        const newArray = Array.from(new Set(rateObj[key]));
        max[`${key}`] = Math.max(...newArray);
    });
    return Object.assign({
        radius: 20,
        fileName,
        heatMap,
        max,
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdENpdHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkZWZhdWx0Q2l0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZCQUF5QztBQUN6Qyw2QkFBNEI7QUFDNUIsZ0ZBQXNFO0FBR3RFLE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQTtBQUMxQixNQUFNLElBQUksR0FBRyxrQkFBa0IsQ0FBQTtBQUUvQixNQUFxQix5QkFBMEIsU0FBUSxnQkFBVTtJQUN4RCxLQUFLLENBQUMsTUFBTSxDQUFFLEdBQVk7UUFDL0IsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQTtRQUN4QixNQUFNLE9BQU8sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQSxDQUFDLFNBQVM7UUFDMUYsR0FBRyxDQUFDLElBQUksR0FBRztZQUNULElBQUksRUFBRSxHQUFHO1lBQ1QsT0FBTyxFQUFFLElBQUk7WUFDYixJQUFJLEVBQUUsTUFBTTtTQUNiLENBQUE7UUFDRCxHQUFHLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQTtJQUNsQixDQUFDO0lBQ0Q7O09BRUc7SUFDSSxLQUFLLENBQUMsVUFBVSxDQUFDLEdBQVk7UUFDbEMsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQTtRQUN4QixNQUFNLElBQUksR0FBRyxNQUFNLE9BQU8sQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQSxDQUFDLCtCQUErQjtRQUNwSixNQUFNLE9BQU8sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLElBQUksRUFB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